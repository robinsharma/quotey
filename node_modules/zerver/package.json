{
  "author": {
    "name": "Jairaj Sethi",
    "email": "j@jairaj.org",
    "url": "http://jairaj.org/"
  },
  "name": "zerver",
  "description": "a modern webapp server",
  "version": "0.12.9",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/jairajs89/zerver.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "mime": "1.2.7",
    "uglify-js": "1.3.4",
    "websocket": "1.0.8"
  },
  "main": "node-client/index.js",
  "bin": {
    "zerver": "server/index.js"
  },
  "readme": "Zerver is a lightweight Node.js-based webserver that lets you seamlessly make server API calls as if they were a library on the client. The goal is to provide a developer-focused toolset and remove all the boilerplate involved in serving a webapp.\n\n### Install\n\n```sh\nnpm install -g zerver\n# or add zerver to your package.json dependencies\n```\n\n# Basic usage\n\nLet's say you have a directory of this structure.\n\n```\nwebsite-dir/index.html\nwebsite-dir/zerver/MyAPI.js\n```\n\nEverything in `website-dir` will be served as static content except for code in `zerver/` which will run on the server.\n\n```js\n// in website-dir/zerver/MyAPI.js\n// this runs on the server\nexports.logStuff = function (str) {\n    console.log(str); // 'hi from client'\n    callback('hi from server');\n};\n```\n\n```html\n<!-- in website-dir/index.html -->\n<!-- this runs in the browser -->\n<script src=\"zerver/MyAPI.js\"></script>\n<script>\n    MyAPI.logStuff('hi from client', function (str) {\n        console.log(str); // \"hi from server\"\n    });\n</script>\n```\n\n```sh\n# run the server\nzerver website-dir\n# go to http://localhost:5000/ to view the magic\n```\n\n### What just happened?\n\n`MyAPI.logStuff` automatically serializes the arguments of the function call and makes an AJAX request to the server. The server runs the function in `website-dir/zerver/MyAPI.js` and responds to the client in a similar way.\n\nAny amount of arguments can be used in the function calls as long as they are JSON stringify-able (with the exception of the callback function).\n\nNote: any server code in a subdirectory of `website-dir/zerver` will not be available for import on the client allowing for libraries of private server functionality.\n\n### Require syntax\n\n```html\n<!-- in website-dir/index.html -->\n<script src=\"/zerver/require.js\"></script>\n<script>\n    var MyAPI = require('MyAPI');\n    MyAPI.logStuff('hi from client', function (str) {\n        console.log(str); // \"hi from server\"\n    });\n</script>\n```\n\n# Tools\n\n### Debug mode\n\n```sh\nzerver -d website-dir\n```\n\nZerver will automatically reload the server modules when any server-side code is edited. This is allows for rapid development and testing of server-side code.\n\n### Auto-refresh mode\n\n```sh\nzerver -dr website-dir\n```\n\nAny webpage being viewed that has a Zerver script on it (`website-dir/index.html`) will automatically refresh when any of its code is edited. You can edit code and immediately see feedback on how it effects your running webapp.\n\n# ExpressJS integration\n\nZerver integrates well with Express, providing the same functionality to any existing webapp.\n\n```js\n// \"app\" is an ExpressJS app instance\nvar zerver = require('zerver');\napp.use( zerver.middleware('path/to/zerver/scripts', 'url/to/zerve/at') );\n```\n\nAlong with the rest of your Express app, Zerver scripts will be accessible the specified path (`url/to/zerve/at`) for importing into your client-side code.\n\n# Node module\n\nA convenient tool for testing and server-to-server integration is the NodeJS Zerver module.\n\n```js\nvar zerver = require('zerver');\n\nzerver.get('http://localhost:5000/zerver/', function (myzerver) {\n    myzerver.MyAPI.logStuff('hi from another server', function (str, data) {\n        console.log(str); // \"hi from server\"\n    });\n});\n```\n\n# Advanced usage\n\n### Zerver options\n\n```sh\n# run server on a different port\nzerver --port=8000 website-dir\n```\n\n```sh\n# automatically append a comment timestamp whenever\n# a HTML5 cache.manifest is requested\nzerver -d --manifest=path/to/cache.manifest website-dir\n\n# in production mode this will always have\n# the timestamp of the time of deploy\nzerver --manifest=path/to/cache.manifest website-dir\n```\n\n### Default options\n\nYou can specify default options in an environment variable,\nto avoid having to type them every time\n```sh\nexport ZERVER_FLAGS='-drl'\n```\n\n### Cross origin\n\nZerver can automatically make a script available to multiple host origins. This is especially useful if you are including a Zerver script from a subdomain of your webapp.\n\n```js\n// in website-dir/zerver/MyAPI.js\n\n// all any website to include your zerver script\nexports._crossOrigin = '*';\n```\n\nThe value of `exports._crossOrigin` is exactly what will be served as the `Allow-Access-Control-Origin` header for cross origin requests if acceptable.\n\n### Script names\n\nZerver scripts can be globalised on the client under whatever name you please. If you are afraid of object name collisions simply define the query argument `name` for the script and it will be globalised as such.\n\n```html\n<!-- in website-dir/index.html -->\n<script src=\"zerver/MyAPI.js?name=SomeOtherAPI\"></script>\n<script>\n    SomeOtherAPI.logStuff('hi from client', function (str) {\n        console.log(str); // \"hi from server\"\n    });\n</script>\n```\n### Error handling\n\n```html\n<!-- in website-dir/index.html -->\n<script src=\"zerver/MyAPI.js\"></script>\n<script>\n    MyAPI.logStuff('hi from client', function (str) {\n        // this === MyAPI\n        console.log(str); // \"hi from server\"\n    }).error(function (err) {\n        // this === MyAPI\n        console.log(err); // error string explaining failure\n    });\n</script>\n```\n\n# Example apps\n\n[Basic app](https://github.com/jairajs89/zerver/tree/master/examples/basic-app)\n\n[Express app](https://github.com/jairajs89/zerver/tree/master/examples/express-app)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jairajs89/zerver/issues"
  },
  "_id": "zerver@0.12.9",
  "dist": {
    "shasum": "10c875bd1c1f08d9d55159df9fe59e0d15e8b37b"
  },
  "_from": "zerver@0.12.9",
  "_resolved": "https://registry.npmjs.org/zerver/-/zerver-0.12.9.tgz"
}
